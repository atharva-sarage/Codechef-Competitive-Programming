#include <bits/stdc++.h>
# define ff first 
# define ss second
# define pb push_back
# define mp make_pair
# define mx 100005
long long inf=1e17;
using namespace std;
struct data2
{
	long long  ll,hh;
};
struct point 
{
	long long  x,y;
};
long long calc(long long  ind,point  p3)
{
	if(ind==0)
		return p3.x+p3.y;
	if(ind==1)
		return p3.x-p3.y;
	if(ind==2)
		return -p3.x+p3.y;
	if(ind==3)
		return -p3.x-p3.y;
}
data2 tree[4][4*mx+1];
long long  lo[4][4*mx+1],hi[4][4*mx+1];
point  p[mx+5];
void init(long long  i,long long  a,long long  b,long long  ind)
{
	lo[ind][i]=a;
	hi[ind][i]=b;
	if(a==b)
		return;
	long long  m=(a+b)/2;
	init(2*i,a,m,ind);
	init(2*i+1,m+1,b,ind);
}
long long  merge1(long long  i1,long long  i2)
{
	return min(i1,i2);
}
long long  merge2(long long  i1,long long  i2)
{
	return max(i1,i2);
}
void build(long long  i,long long  ind)
{
	long long  l=lo[ind][i];
	long long  r=hi[ind][i];
	if(l==r)
	{
		tree[ind][i].ll=calc(ind,p[l]);
		tree[ind][i].hh=calc(ind,p[l]);
		return;
	}
	build(2*i,ind);
	build(2*i+1,ind);
	tree[ind][i].ll=merge1(tree[ind][2*i].ll,tree[ind][2*i+1].ll);
	tree[ind][i].hh=merge2(tree[ind][2*i].hh,tree[ind][2*i+1].hh);
}
long long  minquery(long long  i,long long  l,long long  r,long long  ind)
{
	if(r<lo[ind][i] || hi[ind][i]<l)
		{
			return inf;
		}
	if(l<=lo[ind][i] && hi[ind][i]<=r)
	{
		return tree[ind][i].ll;
	}
	return min(minquery(2*i,l,r,ind),minquery(2*i+1,l,r,ind));

}
long long  maxquery(long long  i,long long  l,long long  r,long long  ind)
{
	if(r<lo[ind][i] || hi[ind][i]<l)
		{
			return -inf;
		}
	if(l<=lo[ind][i] && hi[ind][i]<=r)
	{
		return tree[ind][i].hh;
	}
	return max(maxquery(2*i,l,r,ind),maxquery(2*i+1,l,r,ind));
}
void update(long long  i,long long  pos,point  val,long long  ind)
{
	long long  l=lo[ind][i];
	long long  r=hi[ind][i];
	if(lo[ind][i]==hi[ind][i] && lo[ind][i]==pos)
	{
		tree[ind][i].ll=calc(ind,val);
		tree[ind][i].hh=calc(ind,val);
		return;
	}
	long long  m=(l+r)/2;
	if(pos<=m)
		update(2*i,pos,val,ind);
	else
		update(2*i+1,pos,val,ind);

	tree[ind][i].ll=merge1(tree[ind][2*i].ll,tree[ind][2*i+1].ll);
	tree[ind][i].hh=merge2(tree[ind][2*i].hh,tree[ind][2*i+1].hh);
}
int main()
{
	ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	long long  n,q;
	cin>>n;
	for(long long  i=1;i<=n;i++)
	{
		long long  x,y;
		cin>>x>>y;
		p[i]={x,y};
	}
	init(1,1,n,0);
	build(1,0); 
	init(1,1,n,1);
	build(1,1); 
	init(1,1,n,2);
	build(1,2); 
	init(1,1,n,3);
	build(1,3); 
	cin>>q;
	for(long long  i=0;i<q;i++)
	{
		char type;
		cin>>type;
		if(type=='U')
		{
			long long  p1;
			cin>>p1;
			long long  x,y;
			cin>>x>>y;
			p1++;
			point  p2={x,y};
			update(1,p1,p2,0);update(1,p1,p2,1);update(1,p1,p2,2);update(1,p1,p2,3);
		}
		else
		{
			long long  l,r;
			cin>>l>>r;
			l++;r++;
			cout<<max({maxquery(1,l,r,0)-minquery(1,l,r,0),maxquery(1,l,r,1)-minquery(1,l,r,1),maxquery(1,l,r,2)-minquery(1,l,r,2),maxquery(1,l,r,3)-minquery(1,l,r,3)})<<endl;
		}
	}
}
