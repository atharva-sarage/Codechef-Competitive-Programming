#include<bits/stdc++.h>
using namespace std;
set <int>s[2];
int deg[10010];
vector <int> adj[10010];
void addedge(int u,int v)
{
	adj[u].push_back(v);
	adj[v].push_back(u);
}
void dfs(int u,int par,int col)
{
	s[col].insert(u);
	for(auto k:adj[u])
	{
		if(k==par)continue;
		dfs(k,u,col^1);
	}
}
int main()
{
	ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		s[0].clear();
		s[1].clear();
		for(int i=1;i<=n+5;i++)
			{deg[i]=0;adj[i].clear();}
		for(int i=0;i<n-1;i++)
		{
			int x,y;
			cin>>x>>y;
			deg[x]++;deg[y]++;
			addedge(x,y);
		}
		dfs(1,-1,0);
		if(s[0].size()==s[1].size())
		{
			cout<<1<<endl;
			for(auto k:s[0])
				cout<<k<<" ";
			printf("\n");
			for(auto k:s[1])
				cout<<k<<" ";
			printf("\n");
		}
		else
		{
			cout<<2<<endl;
			if(s[0].size()>s[1].size())
			{
				for(auto k:s[0])
				{
					if(deg[k]==1 && k!=1)
					{
						s[1].insert(k);
						s[0].erase(k);
						if(s[1].size()==s[0].size())
							break;
					}
				}
			}
			if(s[1].size()>s[0].size())
			{
				for(auto k:s[1])
				{
					if(deg[k]==1 && k!=1)
					{
						s[0].insert(k);
						s[1].erase(k);
						if(s[1].size()==s[0].size())
							break;
					}
				}
			}
			for(auto k:s[0])
				cout<<k<<" ";
			printf("\n");
			for(auto k:s[1])
				cout<<k<<" ";
			printf("\n");
		}
	}
}