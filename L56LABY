// easy peasy lemon squeezy
#include<bits/stdc++.h>
using namespace std;
struct point
{
	int v,ii,jj;
	bool operator<(const point &o) const
    {
        return v < o.v;
    }
};
bool valid(int i,int j,int n,int m)
{
	if(i<n && i>=0 && j<m && j>=0)
		return 1;
	return 0;
}
int dx[]={-1,0,0,1};
int dy[]={0,1,-1,0};
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,m;
		cin>>n>>m;
		int grid[n+5][m+5],visited[n+5][m+5],prev[n+5][m+5];
		for(int i=0;i<n;i++)	
		{
			for(int j=0;j<m;j++)
				visited[i][j]=0;
		}
		priority_queue <struct point> pq;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				cin>>grid[i][j];
				prev[i][j]=grid[i][j];
				if(grid[i][j]>0)
					pq.push({grid[i][j],i,j});
			}
		}
		while(!pq.empty())
		{
			point p1=pq.top();
			pq.pop();			
			assert(p1.v>0);
			//cout<<p1.ii<<" "<<p1.jj<<" "<<p1.v<<endl;
			visited[p1.ii][p1.jj]=1;
			for(int k=0;k<4;k++)
			{
				if(!valid(p1.ii+dx[k],p1.jj+dy[k],n,m))
					continue;

				if(visited[p1.ii+dx[k]][p1.jj+dy[k]])
					assert(prev[p1.ii+dx[k]][p1.jj+dy[k]]>=p1.v-1);

				if(!visited[p1.ii+dx[k]][p1.jj+dy[k]] && grid[p1.ii+dx[k]][p1.jj+dy[k]] !=-1 )
				{
					if(max(p1.v-1,prev[p1.ii+dx[k]][p1.jj+dy[k]])>0)
						{
						pq.push({max(p1.v-1,prev[p1.ii+dx[k]][p1.jj+dy[k]]),p1.ii+dx[k],p1.jj+dy[k]});
						prev[p1.ii+dx[k]][p1.jj+dy[k]]=max(prev[p1.ii+dx[k]][p1.jj+dy[k]],p1.v-1);
						}
					visited[p1.ii+dx[k]][p1.jj+dy[k]]=1;
				}
			}
		}
		for(int i=0;i<n;i++)	
		{
			for(int j=0;j<m;j++)
			{
				if(visited[i][j])
					cout<<'Y';
				else if(grid[i][j]==-1)
					cout<<'B';
				else
					cout<<'N';
			}
			printf("\n");
		}		
	}
}
