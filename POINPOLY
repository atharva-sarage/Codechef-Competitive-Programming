    #include<stdio.h>
    # define lli int long long
    #define li int long 
    #include<limits.h>
    struct point
    {
    	li x;
    	li y;
    	
    };
    int main()
    {
    	int t;
    	scanf("%d",&t);
    	while(t--)
    	{
    		int n,i,k,j;
    		struct point p[100001];
    		struct point final[10001];
            struct point final1[10001];
    		scanf("%d",&n);
    		for(i=1;i<=n;i++)
    		{
    			scanf("%ld %ld",&p[i].x,&p[i].y);
    		}
    		p[0].x=p[n].x;
    		p[0].y=p[n].y;
    		p[n+1].x=p[1].x;
    		p[n+1].y=p[1].y;
    		li min=2000000000;
            li min1=2000000000;
    		li max=-2000000000;
            li max1=-2000000000;
    		for(i=0;i<n;i++)
    		{
    			// minimum x coordinate;
    			if(p[i].x<min)
    			min=p[i].x;
    			if(p[i].x>max)
    			max=p[i].x;
                if(p[i].y<min1)
                min1=p[i].y;
                if(p[i].y>max1)
                max1=p[i].y;

    			
    		}
    	
    		int c1=n/10,flag=0;
            li top,bot;

    		li x0=min+1;
            li y0=min1+1;
    		int count=0;
    		int t=0,u=0;
            if(max-min<=max1-min1)
            {
    		while(x0<max)
    		{
    			int flag_b=0;
                int flag_t=0;
    			for(i=1;i<=n;i++)
    			{
    				if(p[i].x==x0)
    				{
    					// check of what type
    					if(p[i-1].x >x0 && p[i+1].x<x0)	
    					{
    						top=p[i].y-1;
                            flag_t=1;
    					}
    					else
    					{
    						bot=p[i].y+1;
                            flag_b=1;
    					}
    				}
    				else
    				{
    					int long  c4=((p[i].y-p[i+1].y)*(x0-p[i].x));
    				if(p[i].x >x0 && p[i+1].x<x0)
    				{
                        
    					if(c4%(p[i].x-p[i+1].x)==0)
    						{
    							top=c4/(p[i].x-p[i+1].x)  + p[i].y -1;
                                flag_t=1;
    							
    						}
    					else
    					{
    							if(p[i].y>p[i+1].y)
    							{
    								top=(c4)/(p[i].x-p[i+1].x)  + p[i].y -1;
                                    flag_t=1;
    							}
    							else
    							{
    									top=(c4)/(p[i].x-p[i+1].x)  + p[i].y ;
                                        flag_t=1;
    							}
    						
    					}
    					
    				}
    				if(p[i].x<x0 && p[i+1].x>x0)
    				{
                        //int long long c6=(p[i].y-p[i+1].y)*(x0-p[i].x);
    					if((c4)%(p[i].x-p[i+1].x)!=0 && p[i+1].y<p[i].y)
    					{
    						bot=(c4)/(p[i].x-p[i+1].x)  + p[i].y;
                            flag_b=1;
    					}
    					else
    					{
                            bot=(c4)/(p[i].x-p[i+1].x)  + p[i].y +1 ;
                            flag_b=1;
                        }

    				}
    				}
                    if(flag_b==1 && flag_t==1)
                        break;
    			}
    			//count=count+top-bot+1;
    			
    			// print coordinates
    			
    			for(j=bot;j<=top;j++)
    			{
    				if(t<c1)
    				{
    					final[t].x=x0;
    					final[t].y=j;
    					t++;
    				}
    				else
    				{
    					flag=1;
    					break;
    				}
    				
    			}
    			if(flag==1)
    				break;
    			
                x0++;
    			//printf("%d %d %d\n",top,bot,count);
    		}
    		if(flag==0 && t<c1)
    		printf("-1\n");
    		else
    		{
    			for(k=0;k<c1;k++)
    			{
    				printf("%ld %ld\n",final[k].x,final[k].y);
    			}
    		}
        }
    	else
        {
            while(y0<max1)
            {
                int flag_b1=0;
                int flag_t1=0;
                for(i=1;i<=n;i++)
                {
                    if(p[i].y==y0)
                    {
                        // check of what type
                        if(p[i-1].y >y0 && p[i+1].y<y0) 
                        {
                            bot=p[i].x+1;
                            flag_b1=1;
                        }
                        else
                        {
                            top=p[i].x-1;
                            flag_t1=1;
                        }
                    }
                    else
                    {
                        int long  c7=((p[i].x-p[i+1].x)*(y0-p[i].y));
                    if(p[i].y >y0 && p[i+1].y<y0)
                    {
                        
                        if(c7%(p[i].y-p[i+1].y)==0)
                            {
                                bot=c7/(p[i].y-p[i+1].y)  + p[i].x +1;
                                flag_b1=1;
                                
                            }
                        else
                        {
                                if(p[i].x>p[i+1].x)
                                {
                                    bot=(c7)/(p[i].y-p[i+1].y)  + p[i].x ;
                                    flag_b1=1;
                                }
                                else
                                {
                                        bot=(c7)/(p[i].y-p[i+1].y)  + p[i].x+1 ;
                                        flag_b1=1;
                                }
                            
                        }
                        
                    }
                    if(p[i].y<y0 && p[i+1].y>y0)
                    {
                        //int long long c6=(p[i].y-p[i+1].y)*(x0-p[i].x);
                        if((c7)%(p[i].y-p[i+1].y)!=0 && p[i+1].x<p[i].x)
                        {
                            top=(c7)/(p[i].y-p[i+1].y)  + p[i].x -1;
                            flag_t1=1;
                        }
                        else if((c7)%(p[i].y-p[i+1].y)==0)
                        {
                            top=(c7)/(p[i].y-p[i+1].y)  + p[i].x -1;
                            flag_t1=1;
                        }
                        else
                        {
                            top=(c7)/(p[i].y-p[i+1].y)  + p[i].x  ;
                            flag_t1=1;
                        }

                    }
                    }
                    if(flag_b1==1 && flag_t1==1)
                        break;
                }
                //count=count+top-bot+1;
                
                // print coordinates
                
                for(j=bot;j<=top;j++)
                {
                    if(u<c1)
                    {
                        final1[u].x=j;
                        final1[u].y=y0;
                        u++;
                    }
                    else
                    {
                        flag=1;
                        break;
                    }
                    
                }
                if(flag==1)
                    break;
                
                y0++;
                //printf("%d %d %d\n",top,bot,count);
            
            }
            
           
                for(k=0;k<c1;k++)
                {
                    printf("%ld %ld\n",final1[k].x,final1[k].y);
                }
        }
    	}
    }  