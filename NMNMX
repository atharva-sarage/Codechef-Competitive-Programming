#include<bits/stdc++.h>
using namespace std;
typedef int long long  ll;
ll fact2[8005];
ll invfact2[8005];

ll pow1(ll a, ll b, ll mod) 
{
	if (a==0)
		return 0;

    ll x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>mod) x%=mod;
        }
        y = (y*y);
        if(y>mod) y%=mod; 
        b /= 2;
    }
    return x%mod;
}

ll inv(ll a, ll m)
{
	ll m0 = m, t, q;
	ll x0 = 0, x1 = 1;

	if (m == 1)
	return 0;

	// Apply extended Euclid Algorithm
	while (a > 1)
	{
		// q is quotient
		q = a / m;

		t = m;

		// m is remainder now, process same as
		// euclid's algo
		m = a % m, a = t;

		t = x0;

		x0 = x1 - q * x0;

		x1 = t;
	}

	// Make x1 positive
	if (x1 < 0)
	x1 += m0;

	return x1;
}
    
void calculateFactorial()
 {
 		ll n=6000;                
     	fact2[0]=1;
       
        for(int i=1;i<=6000;i++)
        {
        	fact2[i]=(i*fact2[i-1])P0000003;
        }

        invfact2[5999]=inv(fact2[5999],500000003);
        for(int i=n-1;i>=1;i--)
        {
        	invfact2[i-1]=(i*invfact2[i])P0000003;
        }

}

ll check(ll n,ll k)
{
	if(k==0 && n==0)
		return 1;
	if(n%2==0 && k%2==1)	
		return 0;
	else
		return(check(n/2,k/2));

}

long long nck2(ll n,ll k,ll mod) 
{

	if(n<k)
		return 0;
	ll ans=fact2[n];
	ans=ans*invfact2[k]%mod;
	ans=ans*invfact2[n-k]%mod;
	return ans;
}


int main()
{

	calculateFactorial();	

	int t;
	cin>>t;
	while(t--)
	{
		ll n,k,mod=1000000007,ans=1,mod2=1000000006;
		ll a[6005];
		ll freq[6000]={0};
			
		cin>>n>>k;	
		for(int i=1;i<=n;i++)
		{
			cin>>a[i];
		}
		sort(a+1,a+n+1);	
		
		for(int i=1;i<=n-k+1;i++)
		{
			for(int j=k+i-1;j<=n;j++)
			{					
				ll prod=1000000006;
				ll res=0;
				ll pp=prod/2;
				ll first=j-i-2;
				ll sec=k-3;
				res+=(check(first,sec))*pp;
				
				ll pp2=2;
				res+=nck2(j-i-2,k-3,500000003)*500000004;
				//scout<<res<<endl;
				res%=1000000006;

				

				freq[i+1]+=res;
				if(freq[i+1]<0)
					freq[i+1]+=mod2;

				freq[i+1]%=mod2;
				freq[j]-=res;				
				if(freq[j]<0)
					freq[j]+=mod2;
				freq[j]%=mod2;
			}
		}
		for(int i=1;i<=n;i++)
			freq[i]=(freq[i-1]+freq[i])%mod2;
		
		
		for(int i=1;i<=n;i++)
			{
				ans=(ans*pow1(a[i],freq[i],mod))%mod;
				ans%=mod;
			}
		cout<<ans<<endl;
		
	}
}