//easy peasy lemon squeezy
/*
	Author-Atharva Sarage
		IIT HYDERABAD
*/
#include<bits/stdc++.h>
# define mx 200005
using namespace std;
struct tupl
{int a,b,c,d;};
int level[mx];
int par[mx];
vector <struct tupl> final1;
vector <int> adj[mx];
vector <int> l[mx];
int maxlevel=1;
void addedge(int u,int v)
{
	adj[u].push_back(v);
	adj[v].push_back(u);
}
void bfs(int u)
{
	queue<int> q;
	q.push(u);
	level[u]=1;
	par[u]=-1;
	while(!q.empty())
	{
		int v=q.front();
		q.pop();
		for(int i=0;i<adj[v].size();i++)
		{
			int x=adj[v][i];
			if(x==par[v])
				continue;
			level[x]=level[v]+1;
			maxlevel=max(maxlevel,level[x]);
			par[x]=v;
			q.push(x);
		}

	}
}
void init()
{
	maxlevel=1;
	final1.clear();
	for(int i=1;i<mx;i++)
		{
		l[i].clear();
		adj[i].clear();
		}
	memset(level,0,sizeof(level));
	memset(par,-1,sizeof(par));
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		init();
		int n;
		cin>>n;
		for(int i=0;i<n-1;i++)
		{
			int x,y;
			cin>>x>>y;
			addedge(x,y);
		}
		if((n-1)%3 !=0)
		{
			cout<<"NO"<<endl;
			continue;
		}
		bfs(1);
		for(int i=1;i<=n;i++)
		{
			l[level[i]].push_back(i);
		}
		int flag=0;
		for(int i=maxlevel-1;i>1;i--)
		{
			for(int j=0;j<l[i].size();j++)
			{
				if(adj[l[i][j]].size()==1)
					continue;

				int count1=adj[l[i][j]].size();
				if(count1%3==2)
				{
					flag=1;
					break;
				}
				int k;
				int flag2=0;
				for(k=0;k<count1;k=k+3)
				{
					if(k+2>=count1 && flag2==1)
						break;
					if(k+3>=count1 && flag2==0)
						break;
					struct tupl tup;
					tup.a=l[i][j];
					if(adj[l[i][j]][k]==par[l[i][j]])
						k++;flag2=1;
					tup.b=adj[l[i][j]][k];
					if(adj[l[i][j]][k+1]==par[l[i][j]])
						k++;flag2=1;
					tup.c=adj[l[i][j]][k+1];
					if(adj[l[i][j]][k+2]==par[l[i][j]])
						k++;flag2=1;
					tup.d=adj[l[i][j]][k+2];
					//cout<<tup.a<<" "<<tup.b<<" "<<tup.c<<" "<<tup.d<<endl;
					final1.push_back(tup);
				}
				if(k<count1)
				{
					
					struct tupl tup;
					tup.a=l[i][j];
					tup.b=par[l[i][j]];
					if(adj[l[i][j]][k]==par[l[i][j]])
						k++;
					tup.c=adj[l[i][j]][k];
					if(adj[l[i][j]][k+1]==par[l[i][j]])
						k++;
					tup.d=adj[l[i][j]][k+1];
					//cout<<tup.a<<" "<<tup.b<<" "<<tup.c<<" "<<tup.d<<endl;
					final1.push_back(tup);
					vector <int>:: iterator itr;
					itr=find(adj[tup.b].begin(),adj[tup.b].end(),tup.a);
					adj[tup.b].erase(itr);
				}
			}
			if(flag==1)
				break;
		}
		if(adj[1].size()%3!=0)
			flag=1;
		else if(adj[1].size()!=0 && adj[1].size()%3==0)
		{
			int i;
			for(i=0;i<adj[1].size();i=i+3)
				{
				struct tupl tup2;
				tup2.a=1;tup2.d=adj[1][i];tup2.b=adj[1][i+1];tup2.c=adj[1][i+2];
				final1.push_back(tup2);
				}	

		}
		if(flag==1)
			cout<<"NO"<<endl;
		else
		{
			cout<<"YES"<<endl;
			for(int i=0;i<final1.size();i++)
			cout<<final1[i].a<<" "<<final1[i].b<<" "<<final1[i].c<<" "<<final1[i].d<<endl;
		}
	}
}