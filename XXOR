#include<bits/stdc++.h>
int power(int a)
{
	int pro=1;
	int k;
	for(k=0;k<a;k++)
	pro=pro*2;
	
	return pro;
}
using namespace std;
int lookup[100005][31][2];
int main()
{
	int n,q,j,i;
	scanf("%d %d",&n,&q);
	int long a[100005];
	for(i=0;i<n;i++)
	{
		scanf("%ld",&a[i]);
	}
	vector <int> vec;
	for(i=0;i<31;i++)
	{
		int count1=0;
		int count0=0;
		//printf("%d\n",power(i));
		if((power(i)&a[0])!=0)
			{
				lookup[0][i][1]=1;
				lookup[0][i][0]=0;
					
			}
		else
			{
				lookup[0][i][0]=1;
				lookup[0][i][1]=0;	
			}
			
		for(j=1;j<n;j++)
		{
			lookup[j][i][1]=lookup[j-1][i][1];
			lookup[j][i][0]=lookup[j-1][i][0];
			
			if((power(i)&a[j])!=0)
				lookup[j][i][1]++;
			else
					lookup[j][i][0]++;
		}
	
	}
	/*for(i=0;i<=4;i++)
	{
		for(j=0;j<n;j++)
		{
			printf("%d ",lookup[j][i][1]);
		}
		printf("\n");
	}*/

	for(j=0;j<q;j++)
	{
		int x,y,c1,c2;
		vector <int> vec;
		scanf("%d %d",&x,&y);
		for(i=0;i<31;i++)
		{
			if(x!=1)
			{
					c1=lookup[y-1][i][0]-lookup[x-2][i][0]; // x is 1 corner case
					c2=lookup[y-1][i][1]-lookup[x-2][i][1];
			
			}
			else 
			{
					c1=lookup[y-1][i][0]; // x is 1 corner case
					c2=lookup[y-1][i][1];
				//	printf("%d %d",c1,c2);
			}
		
			if(c1>c2)
				vec.push_back(1);
			else 
			vec.push_back(0);
			
		}
		/*for(i=0;i<31;i++)
		{
			printf("%d ",vec[i]);
		}*/
		int long pro=1,ans=0;
		for(i=0;i<31;i++)
		{
			ans=ans+vec[i]*pro;
			pro=pro*2;
		}
		printf("%ld\n",ans);
		
	}

}