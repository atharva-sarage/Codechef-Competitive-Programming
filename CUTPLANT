#include<bits/stdc++.h>
using namespace std;
int long max2(int long a,int long b)
{
	if(a>=b)
		return a;
		return b;
}
int long min(int long a,int long b)
{
	if(a>=b)
		return b;
		return a;
}
void showstack(stack <int long> gq)
{
    stack <int long> g = gq;
    while (!g.empty())
    {
        cout << g.top()<<" ";
        g.pop();
    }
    cout << "##"<<'\n';
}
 
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		int n,flag1=0,i,j,k,l,final=0,max1,min1,index;
		scanf("%d",&n);
		int long a[100005]={0};
		int long b[100005]={0};
		vector <int long> a1;
		vector <int long > b1;

		stack <int long > plant;

		int long max=a[0];
		for(i=0;i<n;i++)
			{
				scanf("%ld",&a[i]);
				if(a[i]>max)
					max=a[i];
			}
		
		for(i=0;i<n;i++)
			{
				scanf("%ld",&b[i]);
				if(a[i]<b[i])
					{
						flag1=1;
						//printf("%d\n",i);
					}
			}

		if(flag1==1)
		{
			printf("-1\n");
			continue;
		}
		int long max3;
		for(i=0;i<n;i++)
		{
			if(a[i]==b[i])
			{
				a1.push_back(a[i]);
				b1.push_back(b[i]);
				continue;
			}
			a1.push_back(a[i]);
			b1.push_back(b[i]);
			max3=b[i];
			i++;
			
			while(b[i]==b[i-1])
			{
				max3=max2(max3,b[i]);
				if(a[i]<max3)
				{
					break;
				}
				i++;
			}
			i--;
		}
		/*for(i=0;i<a1.size();i++)
		{
			printf("%ld ",a1[i]);
		}
		printf("\n");
	
		for(i=0;i<b1.size();i++)
		{
			printf("%ld ",b1[i]);
		}
		printf("\n");*/
		n=a1.size();
		for(i=0;i<n;i++)
		{
			
			if(a1[i]==b1[i] && plant.size()==0)
				continue;

			max1=b1[i];
			index=i;			
			plant.push(b1[i]);
			while(b1[i+1]<=max1 && a1[i+1]>=max1 && i<n-1)
			{
				//showstack(plant);
				
				
				if(b1[i+1]<plant.top())
					plant.push(b1[i+1]);
				
				else if(b1[i+1]>plant.top())
				{
					while(plant.top()<b1[i+1])
				{
					//printf("%ld// %ld",plant.top(),b[i+1]);
					plant.pop();
					final++;
				}
				//printf("%ld %ld\n",plant.top(),b[i+1]);
				if(plant.top()!=b1[i+1])
					plant.push(b1[i+1]);
				}
				
				if(b1[i+1]==plant.top())
				{
					i++;
					continue;
				}

				max1=max2(b1[i+1],max1);

				if(b1[i+1]==max1 )
					{
					
						i++;
						break;
					}
				
				i++;
				
			}
			
			final=final+plant.size();	
		
			while(plant.size()>0)		
			plant.pop();

		}
		printf("%d\n",final );
}
}
/*
1
5
7 6 4 3 5
4 4 2 2 1

*/