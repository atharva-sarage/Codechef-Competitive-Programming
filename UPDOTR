#include<bits/stdc++.h>
# define mx 1000005
using namespace std;
int a[mx],learn[mx],depth[mx];
int par[21][mx];
vector <int> adj[mx];
typedef int long long ll;
void addedge(int u,int v)
{
	adj[u].push_back(v);
	adj[v].push_back(u);
}

void dfs2(int u,int parent,int a[],int learn[],int depth[])
{
	if(parent!=-1)
	{
		par[0][u]=parent;
		a[u]=max(a[u],a[parent]);
		learn[u]=learn[parent];
		if(a[u]>a[parent])
		learn[u]++;

		depth[u]=depth[parent]+1;
	}
	for(int i=0;i<adj[u].size();i++)
	{
		int v=adj[u][i];
		if(v==parent)continue;
		dfs2(v,u,a,learn,depth);
	}
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t;
	cin>>t;
	while(t--)
	{
		
		int n,q;
		cin>>n;
		for(int i=1;i<=n;i++)
			adj[i].clear();
		for(int i=1;i<=n;i++)
		{
			for(int j=0;j<=20;j++)
				par[j][i]=-1;
		}

		for(int i=1;i<=n;i++)
			cin>>a[i];
		for(int i=2;i<=n;i++)
		{
			int x;
			cin>>x;
			addedge(i,x);
		}
		
		learn[1]=1;
		dfs2(1,-1,a,learn,depth);		
		for(int k=1;k<20;k++)
		{
			for(int i=1;i<=n;i++)
			{
				int mid=par[k-1][i];
				if(mid!=-1)
					par[k][i]=par[k-1][mid];
			}
		}
		cin>>q;
		ll pr=0;
		while(q--)
		{
			ll v,wt,ans;
			cin>>v>>wt;
			v=v^pr;
			wt=wt^pr;
			if(a[0]>wt)
				ans=learn[v];
			else if(a[v]<=wt)
				ans=0;
			else
			{
				int u=v;
				for(int j=19;j>=0;j--)
				{
					if(par[j][u]!=-1 && a[par[j][u]]>wt)
						u=par[j][u];
				}
				ans=learn[v]-learn[par[0][u]];
			}
			cout<<ans<<endl;
			pr=ans;

		}
	}
}