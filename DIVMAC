#include<bits/stdc++.h>
using namespace std;
# define mx2 25
# define mx 1000005
vector <int> tree[mx];
int lo[mx+1],hi[mx+1],delta[mx+1],spf[1000010],a[mx];
void sieve() 
{ 
    spf[1] = 1; 
    for (int i=2; i<1000004; i++)   
    	spf[i] = i; 
  
    for (int i=4; i<1000004; i+=2) 
        spf[i] = 2; 
  
    for (int i=3; i*i<1000004; i++) 
    { 
        if (spf[i] == i) 
        { 
            for (int j=i*i; j<1000004; j+=i) 
  
                if (spf[j]==j) 
                    spf[j] = i; 
        } 
    } 
} 
void init(int i,int a,int b)
{
	tree[i].clear();
	delta[i]=0;
	lo[i]=a;
	hi[i]=b;
	if(a==b)
		return;	
	int m=(a+b)/2;
	init(2*i,a,m);
	init(2*i+1,m+1,b);
}
void merge(int i0,int i1,int i2)
{
	for(int i=0;i<=22;i++)
	{
		tree[i0][i]=max(tree[i1][min(22,i+delta[i1])],tree[i2][min(22,i+delta[i2])]);
	}

}
void build(int i)
{
	int l=lo[i];
	int r=hi[i];
	if(l==r)
	{
		int x=a[l];
		while (x != 1) 
	    { 
	    	int y=spf[x];
	    	while(x%y==0)
	        	{
	        		tree[i].push_back(y);
	        		x/=y;
	        	}
	    }
	    while(tree[i].size()<=24)
	    	tree[i].push_back(1);
		return;
	}
	build(2*i);
	build(2*i+1);
	merge(i,2*i,2*i+1);
}
void prop(int i)
{
	delta[2*i]+=delta[i];
	delta[2*i+1]+=delta[i];
	delta[i]=0;
}
void increment(int i,int a,int b,int val) // INCREMENT ALL VALUES IN RANGE A TO B
{
	if(b<lo[i] || hi[i]<a)
		return ;
	if(a<=lo[i] && hi[i]<=b)
		{
		delta[i]+=val;
		return ;
		}
	if(tree[i][0]==1)
		return ;
	prop(i);
	increment(2*i,a,b,val);
	increment(2*i+1,a,b,val);
	merge(i,2*i,2*i+1);
}
int query(int i,int l,int r)
{
	if(r<lo[i] || hi[i]<l)
		{
		return 0;
		}
	if(l<=lo[i] && hi[i]<=r)
	{
		return tree[i][min(22,delta[i])];
	}
	if(tree[i][0]==1)
		return 1;
	prop(i);
	int maxr=query(2*i,l,r);
	int maxl=query(2*i+1,l,r);
	merge(i,2*i,2*i+1);
	return max(maxr,maxl);
}
int main()
{
	sieve();
	for(int i=0;i<mx;i++)
		tree[i].reserve(25);
	int t;
	cin>>t;
	while(t--)
	{
		int n,m;
		cin>>n>>m;
		for(int i=1;i<=n;i++)
			cin>>a[i];
		init(1,1,n);
		build(1);
		for(int i=0;i<m;i++)
		{
			int type,l,r;
			cin>>type>>l>>r;
			if(type==1)
			{
				cout<<query(1,l,r)<<" ";
			}
			else
			{
				increment(1,l,r,1);
			}
		}		
		printf("\n");
	}
}