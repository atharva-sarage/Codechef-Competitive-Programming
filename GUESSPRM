/******************************************
*    AUTHOR:         Atharva Sarage       *
*    INSTITUITION:   IIT HYDERABAD        *
******************************************/
#include<bits/stdc++.h>
#warning Check Max_Limit,Overflows
using namespace std;
# define IOS ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
# define ff first
# define ss second
# define pb push_back
# define mod 1000000007
# define ll long long 
# define db double
# define inf 1e9
# define mx2 100005
# define mx 100005
vector <ll> vec;
ll inv(ll a, ll m) 
{ 
    ll m0 = m, t, q; 
    ll x0 = 0, x1 = 1;   
    if (m == 1) 
       return 0; 
    while (a > 1) 
    { 
        q = a / m;  
        t = m; 
        m = a % m, a = t;   
        t = x0;   
        x0 = x1 - q * x0;   
        x1 = t; 
    }   
    // Make x1 positive 
    if (x1 < 0) 
       x1 += m0;   
    return x1; 
} 
ll solve_CRT()
{
	ll prod=1;
	for(ll i=0;i<vec.size();i++)
		prod*=vec[i];

	ll result=0;
	for(ll i=0;i<vec.size();i++)
	{
		ll pp=prod/vec[i];
		result+=(i)*inv(pp,vec[i])*pp;
	}
	//cout<<prod<<" "<<"***"<<endl;
	return (result%prod)?(result%prod):prod;
}
bool isPrime(ll n) 
{ 
    // Corner cases 
    if (n <= 1)  return false; 
    if (n <= 3)  return true; 
  
    // This is checked so that we can skip  
    // middle five numbers in below loop 
    if (n%2 == 0 || n%3 == 0) return false; 
  
    for (ll i=5; i*i<=n; i=i+6) 
        if (n%i == 0 || n%(i+2) == 0) 
           return false; 
  
    return true; 
} 
int main()
{
	IOS;
	ll t;
	cin>>t;
	while(t--)	
	{
		ll x;
		cout<<1<<" "<<31623<<endl;
		cin>>x;
		ll y=1000014129-x;

		for(ll i=1;i*i<=y;i++)
		{
			if(y%i==0)
			{
				if(i==y/i)
				{
					if(isPrime(i))
						vec.pb(i);
				}
				else
				{
					if(isPrime(i))
						vec.pb(i);
					if(isPrime(y/i))
						vec.pb(y/i);
				}
			}
		}
		
		// for(auto k:vec)
		// 	cout<<k<<endl;
		ll ans=solve_CRT();
		assert(ans>=1 && ans<=1000000000);
		cout<<1<<" "<<ans<<endl;
		cin>>x;
		cout<<2<<" "<<vec[(ll)sqrt(x)]<<endl;
		string str;
		cin>>str;
		if(str=="No")
			return 0;

		vec.clear();

	}
}
